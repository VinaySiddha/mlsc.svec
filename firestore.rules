rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile information. Only the owner can read, create, update or delete their profile.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' with ID 'user_abc' can create their profile.
     * @allow (get, update, delete) User 'user_abc' can read, update, and delete their own profile.
     * @deny (create) User 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get, update, delete) User 'user_xyz' cannot read, update or delete user 'user_abc's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to club role definitions. All reads are public. Only admins can create, update or delete.
     * @path /club_roles/{clubRoleId}
     * @allow (get, list) Any user can read and list club roles.
     * @allow (create) Admin user 'admin_abc' can create club roles.
     * @deny (create) Non-admin user cannot create club roles.
     * @principle Public read access with admin-only writes, enforced by admin role.
     */
    match /club_roles/{clubRoleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages access to applications. All reads are public. Only admins can create, update or delete.
     * @path /applications/{applicationId}
     * @allow (get, list) Any user can read application data.
     * @allow (create) Admin user 'admin_abc' can create application data.
     * @deny (create) Non-admin user cannot create application data.
     * @principle Public read access with admin-only writes, enforced by admin role.
     */
    match /applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages admin roles. Only a user can create their own admin flag.
     * @path /roles_admin/{userId}
     * @allow (create) User 'user_abc' can create their own admin role document.
     * @deny (create) User 'user_xyz' cannot create admin role document for 'user_abc'.
     * @deny (get, list, update, delete) No one can get, list, update or delete from this collection.
     * @principle Owner only writes.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }
  }
}