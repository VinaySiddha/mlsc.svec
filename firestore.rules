/**
 * @fileoverview Firestore Security Rules for the MLSC Hub application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and admin-only access for managing club roles and applications.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, ensuring that only the
 *   authenticated user can access their own profile data.
 * - Club roles are stored under `/club_roles/{clubRoleId}` and can only be managed by admins.
 * - Applications are stored under `/applications/{applicationId}` and can only be managed by admins.
 * - Admin roles are determined by the existence of a document in `/roles_admin/{userId}`.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Admin privileges are granted based on the existence of a document in the `roles_admin` collection.
 * - Data validation is minimal during this prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - The `applications` collection does not duplicate user data. Instead, security is restricted to admins only.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching user ID can create their profile.
     * @allow (get, update, delete) Authenticated user with matching user ID can access and modify their profile.
     * @deny (create) Authenticated user tries to create a profile with a different user ID.
     * @deny (get, update, delete) Authenticated user tries to access or modify another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces admin-only access for managing club roles.
     * @path /club_roles/{clubRoleId}
     * @allow (create, get, update, delete, list) Admin users can perform all operations.
     * @deny (create, get, update, delete, list) Non-admin users cannot perform any operations.
     * @principle Restricts access to a privileged role.
     */
    match /club_roles/{clubRoleId} {
        function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Enforces admin-only access for managing applications.
     * @path /applications/{applicationId}
     * @allow (create, get, update, delete, list) Admin users can perform all operations.
     * @deny (create, get, update, delete, list) Non-admin users cannot perform any operations.
     * @principle Restricts access to a privileged role.
     */
    match /applications/{applicationId} {
        function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Determines admin privileges based on document existence.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        function isAdmin(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        allow get: if isAdmin(userId);
        allow list: if false; // do not allow listing of admins
        allow create: if request.auth.uid == userId;
        allow update: if false;
        allow delete: if false;
    }
  }
}