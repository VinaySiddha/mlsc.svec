/**
 * @fileoverview Firestore Security Rules for the MLSC Hub application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * restricts club role creation and modification, and secures application data
 * based on user identity and admin roles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user and admins.
 * - /club_roles/{clubRoleId}: Stores club role definitions, writable only by admins.
 * - /applications/{applicationId}: Stores application data, accessible to the applicant and admins.
 * - /roles_admin/{userId}: Determines admin privileges; presence grants admin access.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - All write operations are protected by authorization checks to prevent unauthorized data modification.
 * - Data needed for authorization decisions is denormalized onto the documents being secured.
 * - Role based admin management is used via presence check.
 *
 * Denormalization for Authorization:
 * - Application documents include `userProfileId` to easily check the applicant's identity.
 *
 * Structural Segregation:
 * - User profiles and club roles are stored in separate collections to simplify access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles and restricts access to admins.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile or is an admin.
     * @deny (get, create, update, delete) if the user is not the owner and not an admin.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Controls access to club role definitions, allowing only admins to create, update, and delete.
     * @path /club_roles/{clubRoleId}
     * @allow (get, list) public access
     * @allow (create, update, delete) only for admins.
     * @deny (create, update, delete) for non-admins.
     */
    match /club_roles/{clubRoleId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to application data, allowing applicants and admins to read, and only admins to modify.
     * @path /applications/{applicationId}
     *   Applicant can read/write their own apps. Admins can read and modify all apps.
     * @allow (get, list) if the user is the applicant or is an admin.
     * @allow (create) if the user is the applicant.
     * @allow (update, delete) only for admins.
     * @deny (create) if the user is not the applicant.
     * @deny (update, delete) for non-admins.
     * @principle Enforces data ownership for reads and restricts modifications to admins.
     */
    match /applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isApplicant(userProfileId) {
        return isSignedIn() && request.auth.uid == userProfileId;
      }

      function isExistingApplicant(userProfileId) {
        return isSignedIn() && request.auth.uid == resource.data.userProfileId && resource != null;
      }
      allow get: if isApplicant(resource.data.userProfileId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && isApplicant(request.resource.data.userProfileId);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages admin privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete) only for admins.
     * @deny (get, create, update, delete) for non-admins.
     */
    match /roles_admin/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

      allow get: if isSignedIn() && isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) || isAdmin();
      allow update: if false;
      allow delete: if isSignedIn() && isOwner(userId) || isAdmin();
    }
  }
}