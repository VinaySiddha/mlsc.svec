/**
 * @file Firebase Security Rules for MLSC Hub.
 *
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles,
 *                  restricts club role management to admins, and provides access control
 *                  for applications based on user and admin roles. Data structure is optimized
 *                  for efficient authorization and avoids complex queries in rules.
 *
 * @data_structure User profiles are stored under `/users/{userId}`, club roles are stored
 *                  in the `/club_roles/{clubRoleId}` collection. Applications are stored under
 *                  `/applications/{applicationId}`, and admin roles are determined by existence
 *                  in the `/roles_admin/{uid}` collection.
 *
 * @key_security_decisions User listing is disabled.  Ambiguous relationships default to
 *                         the most secure interpretation (owner-only access).  No schema enforcement is applied except for relational integrity.
 *
 * @denormalization Admin status is determined by presence in the `/roles_admin/{uid}` collection,
 *                  avoiding the need to store admin status within user profiles.
 *                  Applications store userProfileId and clubRoleId directly, eliminating the
 *                  need for complex `get()` calls to associated documents.
 *
 * @structural_segregation Admin status is stored separately in `/roles_admin/{uid}` instead
 *                         of a field within the user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can access and manage their profile.
     * @deny (create, get, update, delete) Any other user cannot access this profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages club roles.
     * @path /club_roles/{clubRoleId}
     * @allow (create) Admin users can create new club roles.
     * @allow (get, list) Any user can view existing club roles.
     * @allow (update, delete) Only admin users can modify or delete club roles.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete roles.
     * @principle Restricts club role creation and modification to authorized admins.
     */
    match /club_roles/{clubRoleId} {
       function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages applications.
     * @path /applications/{applicationId}
     * @allow (create) Any signed-in user can submit a new application.
     * @allow (get) Any user can view application data.
     * @allow (update, delete) Only admin users can modify or delete applications.
     * @deny (create) Unsigned-in users cannot submit applications.
     * @deny (update, delete) Non-admin users cannot modify or delete applications.
     * @principle Restricts modification of applications to authorized admins, allows creation by any authenticated user.
     */
    match /applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }
       function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

     /**
      * @description Defines admin roles.
      * @path /roles_admin/{userId}
      * @allow (create) Anyone can create a document in here, this allows the backend to handle assignment of Admin Rights.
      * @allow (get) To check if the user is an admin.
      * @allow (update, delete) No Updates and deletes.
      * @principle Restricts updates and deletes of roles
      */
    match /roles_admin/{userId} {
       function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}