rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Authenticated user attempts to create a profile with a different user ID.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      //is signed in function
      function isSignedIn() {
        return request.auth != null;
      }
      // owner function
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to club role documents.
     * @path /club_roles/{clubRoleId}
     * @allow (get, list) - Anyone can read club roles.
     * @allow (create, update, delete) - Only authenticated admins can create, update, or delete club roles.
     * @deny (create, update, delete) - Non-admin users attempt to create, update, or delete club roles.
     * @principle Public read access with admin-only writes.
     */
    match /club_roles/{clubRoleId} {
       function isSignedIn() {
        return request.auth != null;
      }
        function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to application documents.
     * @path /applications/{applicationId}
     * @allow (get, list) - Anyone can read application data.
     * @allow (create, update, delete) - Only authenticated admins can create, update, or delete applications.
     * @deny (create, update, delete) - Non-admin users attempt to create, update, or delete applications.
     * @principle Public read access with admin-only writes.
     */
    match /applications/{applicationId} {
       function isSignedIn() {
        return request.auth != null;
      }
         function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{userId}
     * @allow (create) - Authenticated user can assign themselves as an admin (for initial setup).
     * @allow (get) - Only the user themselves or an existing admin can check if they are an admin.
     * @allow (list) - No listing
     * @allow (update, delete) - Only existing admins can update or delete admin roles.
     * @deny (create, update, delete) - Non-admin users attempt to modify admin roles.
     * @principle Restricts admin role management to authenticated admins.
     */
    match /roles_admin/{userId} {

       function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
         function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

       allow get: if isOwner(userId) || isAdmin();
       allow list: if false;
       allow create: if isSignedIn() && isOwner(userId);
       allow update: if isSignedIn() && isAdmin();
       allow delete: if isSignedIn() && isAdmin();
    }
  }
}