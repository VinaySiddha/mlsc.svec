/**
 * @fileoverview Firestore Security Rules for MLSC Hub application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allows public read access to club roles and applications, and restricts
 * administrative actions to designated admin users.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, ensuring private data.
 * - Club roles are stored in the `/club_roles` collection.
 * - Applications are stored in the `/applications` collection.
 * - Admin status is determined by the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Key Security Decisions:
 * - User profiles are only accessible and modifiable by the owning user.
 * - Club roles and applications are publicly readable but only modifiable.
 * - Admin privileges are granted based on presence in `/roles_admin/{userId}`.
 * - Listing of users is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user ID matches the authenticated user's ID and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in /roles_admin/{userId}.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
     function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
     }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile with matching user ID.
     * @allow (get, update, delete) - Authenticated user can get, update, and delete their own profile.
     * @deny (create) - If the user ID in the request does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for club roles.
     * @path /club_roles/{clubRoleId}
     * @allow (get, list) - All users can read club roles.
     * @allow (create, update, delete) - Only admins can create, update, and delete club roles.
     * @deny (create, update, delete) - Non-admins cannot modify club roles.
     * @principle Restricts modification of club roles to admins.
     */
    match /club_roles/{clubRoleId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for applications.
     * @path /applications/{applicationId}
     * @allow (get, list) - All users can read applications.
     * @allow (create) - Authenticated users can create applications.
     * @allow (update, delete) - Only admins can update and delete applications.
     * @deny (create) - Unauthenticated users cannot create applications.
     * @deny (update, delete) - Non-admins cannot modify applications.
     * @principle Restricts modification of applications to admins.
     */
    match /applications/{applicationId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userProfileId == request.auth.uid;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (get) - Only the admin user can get their own admin role.
     * @allow (create) - Only signed-in users can create an admin record for themselves
     * @allow (delete) - Only signed-in users can delete their own admin role.
     * @deny (get) - If the user is not the owner of the admin role.
     * @deny (create, delete) - Unauthenticated users cannot create or delete admin roles.
     * @principle Enforces document ownership for admin roles and requires authentication.
     */
    match /roles_admin/{userId} {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if false;
          allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}